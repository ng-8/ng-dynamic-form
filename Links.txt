http://embed.plnkr.co/YheTIB/ - Dummy-Data.json / Pagination

http://embed.plnkr.co/tINlfy/ - Angular2 DataTable - table with sorting and pagination for angular2


https://www.npmjs.com/package/angular2-datatable-pagination


DD
https://plnkr.co/edit/GDXsPt4aiS7vus6oPvuU?p=preview
http://embed.plnkr.co/cuMsdkK6SuTn41uQSeI6

https://embed.plnkr.co/fYxjHY5xALoLuqaQze6u/ - Add User
http://embed.plnkr.co/uewN3TvYg05wR8BLFTFz/ - Simple Form
https://embed.plnkr.co/aWTZswhBnUVLg7qyDr83/ - Forms example
http://embed.plnkr.co/9wCa32tXbYA1cDQEaA97/ - Form Builder

https://embed.plnkr.co/dPmiJn/- Form Basic (Class/Plain)
http://embed.plnkr.co/ENgZo8EuIECZNensZCVr/ - FormBuilder
http://embed.plnkr.co/6XKA5Bk8Oor8dP8pL1xr/ - Dynamic Form/Question
https://angular.io/guide/dynamic-form - Dynamic Form/Question - Todo: Download/Explore

Search text:
https://embed.plnkr.co/giSBvwKpq04qfRBLDY8x


https://embed.plnkr.co

https://angular.io/tutorial/toh-pt5



https://blog.thoughtram.io/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html

http://jasonwatmore.com/post/2016/08/23/angular-2-pagination-example-with-logic-like-google

http://jasonwatmore.com/post/2017/04/19/angular-2-4-router-animation-tutorial-example - Table/Popup Form
http://jasonwatmore.com/post/2016/12/01/angular-2-communicating-between-components-with-observable-subject
http://jasonwatmore.com/post/2017/06/25/angular-2-4-alert-toaster-notifications



Angular 2 Cookbook Paperback – January 20, 2017
by Matt Frisbie

Angular 2 Cookbook Paperback – January 20, 2017
by Matt Frisbie

https://plnkr.co/edit/6Ffmm2lNazrtA66AO2ji?p=preview - TODO / DDL

http://plnkr.co/edit/vPXf2U?p=preview - this.http.get('./dummy-data.json')
http://plnkr.co/edit/PxBaZs?p=preview - this.http.get("app/demo/data.json")
http://www.c-sharpcorner.com/article/show-data-using-web-api-and-service-in-angular-2/ - this._http.get(this.apiUrl)  

<select class="form-control input-sm" [(ngModel)]="rowsOnPage">
                    
<option [ngValue]="5">5</option>
                    
<option [ngValue]="10">10</option>
                    
<option [ngValue]="15">15</option>
                
</select>


http://embed.plnkr.co/zkTf2s/

https://coryrylan.com/blog/angular-observable-data-services

Pass Values into Angular 2 Components with @Input


http://lishman.io/angular-2-input-binding - BASIC

http://www.angulartypescript.com/angular-2-data-binding/ - BASIC / CHECK THIS OUT / BASIC EXAMPLES

https://plnkr.co/edit/mheHadpfNowjM5DZbbml?p=preview - FILTER/GROUPING

http://www.morphatic.com/2016/06/23/creating-a-filter-pipe-for-angular-2-in-ionic-2/ - BASIC FILTER


##########################################################################
DROPDOWN LIST:
##########################################################################

import {Component} from '@angular/core';

@Component({
    selector: 'drop-down',
    template: `
        <h1>Drop-down List</h1>
        <select #select [(ngModel)]="current" (change)="logDropdown(select.value)">
            <option *ngFor="let item of list" [value]="item.id">{{item.name}}</option>
        </select>
        
        <h2>Log <button (click)="log=''">Clear</button></h2>
        <pre>{{log}}</pre>`
})
export class DropDownComponent {

    private list = [
        { id: 1, name: 'one' },
        { id: 2, name: 'two' },
        { id: 3, name: 'three' }
    ];
    private current: number = 2;
    private log: string ='';

    private logDropdown(id: number): void {
        const NAME = this.list.find( (item: any) => item.id == id ).name;
        this.log += `Value ${NAME} was selected\n`
    }

}

##########################################################################
https://plnkr.co/edit/6Ffmm2lNazrtA66AO2ji?p=preview

import { Component } from '@angular/core';

@Component({
  selector: 'my-app',
  template: `<h1>Hello {{name}}</h1>
  <br />
  <table>
        <tr *ngFor="let class of Classes">
            <td>{{class.Name}}</td>
            <td>
            <select (change)="dropDownChanged($event.target.value, class)">
               <option *ngFor="let section of sections"
                    [value]="section"
                    [selected]="section === class.Section"
                    >
                    {{section}}
               </option>
               </select>
            </td>
        </tr>
    </table>    
    `,
})
export class AppComponent  { 
  name = 'Angular';

  Classes = [
    {Name: 'name1', Section: 'White'},
    {Name: 'name2', Section: 'Green'}
  ];
  sections = ["White", "Blue", "Purple", "Green", "Red;"]
  
  dropDownChanged = (value: any, model : any): void => {
        model.Section = value;
        console.log(this.Classes);
  }

 }



@Injectable()
export class CallService{
    constructor(private errror:string){
        this.errMsg=errror;
    }
    private _errMsg:string;
    set errMsg(arg0:string){
        this._errMsg=arg0;
    }
    get errMsg():string{
        return this._errMsg;
    }
}

@Injectable()
export class DownloadService extends CallService{
    constructor(){
        super("");
    }
}

##########################################################################
https://embed.plnkr.co/l1oTNT/ - Angular v4 - Applying filters to *ngFor using pipes





export interface Flyer { canFly: boolean; }
export const HEROES =  [
  {name: 'Windstorm', canFly: true},
  {name: 'Bombasto',  canFly: false},
  {name: 'Magneto',   canFly: false},
  {name: 'Tornado',   canFly: true}
];


<pre>{{data | json}}</pre>






An expression may also refer to properties of the template's context such as a template input variable (let hero) or a template reference variable (#heroInput).

<div *ngFor="let hero of heroes">{{hero.name}}</div>
<input #heroInput> {{heroInput.value}}

<button (click)="onSave($event)">Save</button>
<button *ngFor="let hero of heroes" (click)="deleteHero(hero)">{{hero.name}}</button>
<form #heroForm (ngSubmit)="onSubmit(heroForm)"> ... </form>


08/20/2017
Copy:

http://plnkr.co/edit/vPXf2U?p=preview
http://embed.plnkr.co/6XKA5Bk8Oor8dP8pL1xr/

http://jasonwatmore.com/post/2017/04/19/angular-2-4-router-animation-tutorial-example - Table/Popup Form - ROUTER/TABLE/ROUTERLINK/ROUTE
myapp - SERVICE

angular 2 multiple services


post.service.ts

import { Injectable } from '@angular/core';
import { Http } from '@angular/http';
import 'rxjs/add/operator/map';

@Injectable()
export class PostsService {
    constructor(private http: Http) {
        console.log('PostsService Initialized...');
    }

    getPosts() {
        return this.http.get('https://jsonplaceholder.typicode.com/posts')
            .map(res => res.json());    
    }
}

user.component.ts

import { Component } from '@angular/core';
import { PostsService } from '../services/posts.service';

@Component({
  moduleId: module.id,
  selector: 'user',
  templateUrl: 'user.component.html',
  providers: [PostsService]
})

export class UserComponent  { 
  name: string;
  email: string;
  address: address;
  hobbies: string[];
  showHobbies: boolean;
  posts: Posts[];

  constructor(private postsService: PostsService) {
    this.name = 'John Doe';
    this.email = "john@email.com";
    this.address = {
      street: '12 Main St',
      city: 'Boston',
      state: 'MA'
    }
    this.hobbies = ['Music', 'Movies', 'Sports'];
    this.showHobbies = false;


    this.postsService.getPosts().subscribe(posts => {
      this.posts = posts;
    })

  }

  toggleHobbies(){
    if (this.showHobbies == true){
      this.showHobbies = false;
    } else {
      this.showHobbies = true;
    }
  }

  addHobby(hobby) {
    this.hobbies.push(hobby);
  }

  deleteHobby(i) {
    this.hobbies.splice(i, 1);
  }

}

interface address {
  street: string;
  city: string;
  state: string;
}

interface Posts {
  id: number;
  title: string;
  body: string;
}


user.component.html

<h3>Posts</h3>
<div *ngFor="let post of posts">
<h3>{{post.title}}</h3>
<p>{{post.body}}</p>
</div>